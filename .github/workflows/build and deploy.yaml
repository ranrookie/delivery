name: Build and Deploy to Aliyun

on:
  push:
    branches:
      - main

jobs:
  filter_changes:
    runs-on: ubuntu-latest

    outputs:
      backend_changed: ${{ steps.filter.outputs.backend }}
      frontend_changed: ${{ steps.filter.outputs.frontend }}
      mysql_changed: ${{ steps.filter.outputs.mysql }}
      redis_changed: ${{ steps.filter.outputs.redis }}
      compose_changed: ${{ steps.filter.outputs.compose }}

    steps:
      - uses: actions/checkout@v3
      - id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            mysql:
              - 'mysql/**'
            redis:
              - 'redis/**'
            compose:
              - 'compose.yaml'
              - 'compose.prod.yaml'

  build-and-push:
    needs: filter_changes
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Aliyun ACR
        run: echo "${{ secrets.ALIYUN_PASSWORD }}" | docker login ${{ secrets.ALIYUN_REGISTRY }} -u ${{ secrets.ALIYUN_USERNAME }} --password-stdin

      - name: Build&Push frontend
        if: ${{ needs.filter_changes.outputs.frontend_changed == 'true' }}
        run: |
          docker build -t ${{secrets.ALIYUN_REGISTRY}}/${{secrets.NAMESPACE}}/${{secrets.REPOSITORY}}:frontend ./frontend
          docker push ${{secrets.ALIYUN_REGISTRY}}/${{secrets.NAMESPACE}}/${{secrets.REPOSITORY}}:frontend

      - name: Build&Push backend
        if: ${{ needs.filter_changes.outputs.backend_changed == 'true' }}
        run: |
          docker build -t ${{secrets.ALIYUN_REGISTRY}}/${{secrets.NAMESPACE}}/${{secrets.REPOSITORY}}:backend ./backend
          docker push ${{secrets.ALIYUN_REGISTRY}}/${{secrets.NAMESPACE}}/${{secrets.REPOSITORY}}:backend

      - name: Build&Push mysql
        if: ${{ needs.filter_changes.outputs.mysql_changed == 'true' }}
        run: |
          docker build -t ${{secrets.ALIYUN_REGISTRY}}/${{secrets.NAMESPACE}}/${{secrets.REPOSITORY}}:mysql ./mysql
          docker push ${{secrets.ALIYUN_REGISTRY}}/${{secrets.NAMESPACE}}/${{secrets.REPOSITORY}}:mysql

      - name: Build&Push redis
        if: ${{ needs.filter_changes.outputs.redis_changed == 'true' }}
        run: |
          docker build -t ${{secrets.ALIYUN_REGISTRY}}/${{secrets.NAMESPACE}}/${{secrets.REPOSITORY}}:redis ./redis
          docker push ${{secrets.ALIYUN_REGISTRY}}/${{secrets.NAMESPACE}}/${{secrets.REPOSITORY}}:redis

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Prepare SSH key
        run: |
          echo "${{ secrets.SSH_KEY }}" > private_key
          chmod 600 private_key

      - name: Deploy to Server
        run: |
          ssh -i private_key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd delivery
            docker compose pull
            docker compose -f compose.yaml -f compose.prod.yaml --env-file .env up -d --no-build
            docker container prune -f
            docker image prune -a -f
          EOF
